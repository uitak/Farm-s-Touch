<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<mapper namespace="com.multi.bbs.blog.model.mapper.BlogMapper">

	<resultMap type="Blog" id="blogListResultMap">
		<id property="bNo" column="bNo"/>
		<result property="mNo" column="mNo"/>
		<result property="title" column="TITLE"/>
		<result property="writer" column="WRITER"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="thumbnailImgUrl" column="THUMBNAIL_IMAGE_URL"/>
		<result property="content" column="CONTENT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<result property="likeCount" column="likeCount"/>
		<result property="isLike" column="isLike"/>
	</resultMap>

	<resultMap type="Comment" id="blogCommentResultMap">
		<id 	property="cNo"			column="cNo"/>
		<result property="bNo" 			column="bNo"/>
		<result property="mNo" 			column="mNo"/>
		<result property="profileImg" 	column="profileImg"/>
		<result property="writer"		column="WRITER"/>
		<result property="content" 		column="CONTENT"/>
		<result property="createDate" 	column="CREATE_DATE"/>
		<result property="modifyDate" 	column="MODIFY_DATE"/>
	</resultMap>
	
	<resultMap type="Blog" id="blogDetailResultMap" extends="blogListResultMap">
		<collection property="commentList" javaType="arrayList" columnPrefix="C_" 
												resultMap="blogCommentResultMap"/>
	</resultMap>
	
	<select id="selectBlogList" resultMap="blogListResultMap" parameterType="map">
		SELECT  
			DISTINCT B.BNO, B.TITLE, B.CREATE_DATE, B.MODIFY_DATE,
			B.THUMBNAIL_IMAGE_URL,
			B.READCOUNT, M1.ID as WRITER,
			(SELECT COUNT(*) FROM BLOG_LIKE LK WHERE B.BNO = LK.BNO) as likeCount
			<if test="mNo != null">
				,(SELECT COUNT(*) FROM BLOG_LIKE LK WHERE B.BNO = LK.BNO AND LK.MNO = #{mNo}) as isLike
			</if>
		FROM BLOG B
		LEFT OUTER JOIN MEMBER M1 ON B.MNO = M1.MNO
		<if test="sorted == 'recent'">
			ORDER BY B.MODIFY_DATE DESC LIMIT ${limit} OFFSET ${offset}
		</if>
		<if test="sorted == 'read'">
			ORDER BY B.READCOUNT DESC LIMIT ${limit} OFFSET ${offset}
		</if>
		<if test="sorted == 'like'">
			ORDER BY likeCount DESC LIMIT ${limit} OFFSET ${offset}
		</if>
	</select>
	
	
	<select id="selectBlogCount" resultType="int">
		SELECT  
			 COUNT(DISTINCT B.BNO)
		FROM BLOG B
	</select>
	
	<select id="selectBlogByNo" parameterType="map" resultMap="blogDetailResultMap">
		SELECT
			B.BNO, B.TITLE, M.ID AS WRITER, B.READCOUNT,
			B.THUMBNAIL_IMAGE_URL, B.CONTENT,
			B.CREATE_DATE, B.MODIFY_DATE,
			C.CNO AS C_CNO, 
		    C.BNO AS C_BNO,
		    C.CONTENT  AS C_CONTENT,
		    M2.IMAGE AS C_profileImg,
		    M2.ID AS C_WRITER, 
		    C.CREATE_DATE  AS C_CREATE_DATE, 
		    C.MODIFY_DATE  AS C_MODIFY_DATE,
		    (SELECT COUNT(*) FROM BLOG_LIKE LK WHERE B.BNO = LK.BNO) as likeCount
		    <if test="mNo != null">
				,(SELECT COUNT(*) FROM BLOG_LIKE LK WHERE B.BNO = LK.BNO AND LK.MNO = #{mNo}) as isLike
			</if>
		FROM BLOG B
		JOIN MEMBER M ON(B.MNO = M.MNO)
		LEFT OUTER JOIN COMMENT C ON (B.BNO = C.BNO)
		LEFT OUTER JOIN MEMBER M2 ON (C.MNO = M2.MNO)
		WHERE B.BNO = #{bNo}
	</select>
	
	<insert id="insertBlog" parameterType="Blog">
		INSERT INTO BLOG(
			BNO, MNO, TITLE,
			CONTENT, THUMBNAIL_IMAGE_URL,
			READCOUNT, CREATE_DATE, MODIFY_DATE
		) VALUES (
			0, #{mNo}, #{title},
			#{content}, #{thumbnailImgUrl},
			DEFAULT, DEFAULT, DEFAULT
		)
	</insert>
	
	<insert id="insertComment" parameterType="Comment">
		INSERT INTO COMMENT(
				CNO, BNO, MNO, 
				CONTENT, CREATE_DATE, MODIFY_DATE) 
			VALUES(
				0, #{bNo}, #{mNo}, 
				#{content}, DEFAULT, DEFAULT
			)
	</insert>
	
	<update id="updateBlog" parameterType="Blog">
		UPDATE BLOG
		SET
			TITLE = #{title},
			CONTENT = #{content},
			<if test="thumbnailImgUrl != null">
				THUMBNAIL_IMAGE_URL = #{thumbnailImgUrl},
			</if>
			MODIFY_DATE = CURRENT_TIMESTAMP
		WHERE
			BNO=#{bNo}
	</update>
	
	<update id="updateReadCount" parameterType="map">
		UPDATE BLOG SET READCOUNT=#{readCount} WHERE BNO=#{bNo}
	</update>
	
	<delete id="deleteBlog" parameterType="int">
		DELETE FROM BLOG WHERE BNO=#{bNo}
	</delete>
	
	<delete id="deleteComment" parameterType="int">
		DELETE FROM COMMENT WHERE CNO=#{cNo}
	</delete>
	
	<insert id="likeBlog" parameterType="map">
		INSERT INTO BLOG_LIKE VALUES(#{mNo}, #{bNo})
	</insert>
	
	<delete id="unLikeBlog" parameterType="map">
		DELETE FROM BLOG_LIKE WHERE MNO=#{mNo} AND BNO=#{bNo}
	</delete>

</mapper>